openapi: 3.0.0
info:
  version: 0.0.2
  title: NOT RATIFIED - Application Directory specification
  description: >
    --This is NOT a ratified FDC3 specification--

    Application Directory specification (demo) providing both interface
    definition and objects necessary to construct an application directory
    service.
security:
- bearerAuth: []
paths:
  '/v1/apps/{appId}':
    get:
      summary: Retrieve an application defintion
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApplicationSearchResponse'
        '400':
          description: Bad request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: >-
            Forbidden: Certificate authentication is not allowed for the
            requested user.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: 'Server error, see response body for further details.'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorDTO'
      tags:
        - Application
  /v1/apps:
    post:
      summary: Create a new application definition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSearchResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: >-
            Forbidden: Certificate authentication is not allowed for the
            requested user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: 'Server error, see response body for further details.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
      tags:
        - Application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        required: true
  /v1/apps/search:
    get:
      summary: Retrieve a list of applications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSearchResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '403':
          description: >-
            Forbidden: Certificate authentication is not allowed for the
            requested user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: 'Server error, see response body for further details.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
      tags:
        - Application
servers:
  - url: /appd
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    ErrorDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Application:
      description: >
        Defines an application retrieved from an FDC3 App Directory, which can
        then be launched.

        Launching typically means running for a user on a desktop. 
        The details around 'launching' including who or what might do it, and how the launch action is initiated are
        discussed elsewhere in the FDC3 App Directory spec.
      required:
        - appId
        - name
        - appType
        - appDetails
      properties:
        appId:
          type: string
          description: >
            The unique application identifier located within a specific
            application directory instance.
        name:
          type: string
          description: >
            The name of the application.

            The name should be unique within an FDC3 App Directory instance. The
            exception to the uniqueness constraint is that an App Directory can
            hold definitions for multiple versions of the same app.

            The same appName could occur in other directories. We are not
            currently specifying app name conventions in the document.
        appType:
          type: string
          description: >
            The type of the application. There should be predefined values, the
            different application types would also have different data fields.

            Custom values will also be allowed to enable the use of in-house or
            3rd party specific values such as layouts to be specified.

            Launchers are expected to ignore applications of a custom type that
            they do not support.

            The standard values proposed are

            - "DesktopExe". Some executable on the desktop. The detailed
            definitions could allow for Windows and Mac. This would mainly be
            used for specifying in-house applications developed using .Net.

            - "Container". A Web Application destined to run in a container. The
            Container application type could include meta data for the various
            container types that an application vendor may support.

            - "Custom.{Vendor}.{CustomAppType}". Additional private application
            types can be specified. It requires co-ordination between the 
            launcher and the App Directory instances to allow these values to be used. 
            An possible example would be to allow Desktop Layouts to be stored in an in-house App Directory Instance
        version:
          type: string
          description: >-
            Version of the application. This allows multiple app versions to be
            defined using the same app name. This can be a triplet but can also
            include things like 1.2.5 (BETA)
        title:
          type: string
          description: >-
            Optional title for the application, if missing use appName,
            typically used in a launcher UI.
        tooltip:
          type: string
          description: Optional tooltip description e.g. for a launcher
        description:
          type: string
          description: >-
            Description of the application. This will typically be a 1-2
            paragraph style blurb about the application. Allow mark up language
        images:
          type: array
          description: >-
            Array of images to show the user when they are looking at app
            description. Each image can have an optional description/tooltip
          items:
            $ref: '#/components/schemas/AppImage'
        contactEmail:
          type: string
          description: Optional e-mail to receive queries about the application
        supportEmail:
          type: string
          description: Optional e-mail to receive support requests for the application
        publisher:
          type: string
          description: >-
            The name of the company that owns the application. The publisher has
            control over their namespace/app/signature.
        icons:
          type: array
          description: >-
            Holds Icons used for the application, a Launcher may be able to use
            multiple Icon sizes or there may be a 'button' Icon
          items:
            $ref: '#/components/schemas/Icon'
        customConfig:
          type: array
          description: >-
            An optional set of name value pairs that can be used to deliver
            custom data from an App Directory to a launcher.
          items:
            $ref: '#/components/schemas/NameValuePair'
        intents:
          type: array
          description: >
            The list of intents implemented by the Application as defined by
            https://github.com/FDC3/Intents/blob/master/src/Intent.yaml

          items:
            $ref: '#/components/schemas/Intent'
        appDetails:
          description: Depending on appType, expect to see one of the following for the app details
          oneOf:
            - $ref: '#/components/schemas/AppExe'
            - $ref: '#/components/schemas/AppBrowser'
            - $ref: '#/components/schemas/AppContainer'
            - $ref: '#/components/schemas/AppCustom'
    AppExe:
      required:
        - exePath
      description: Holds data for an appType=Exe
      properties:
        exePath:
          type: string
          description: 'URI to the application, expect to use FILE style URI'
        allowMultiple:
          type: boolean
          description: >-
            Should a launcher create a new instance or try and focus an existing
            instance
    AppBrowser:
      required:
        - url
      description: >-
        Holds data for an appType=Browser. It is up to the Launcher to select
        which Browser to use, typically this will be the default desktop
        browser.
      properties:
        url:
          type: string
          description: The URL to display in a browser window.
        config:
          type: array
          description: >-
            optional set of Config values for displaying the browser, for
            example select a Kiosk mode. Values need to be 'agreed' between
            Launcher and App Directrory.
          items:
            $ref: '#/components/schemas/NameValuePair'
    AppContainer:
      required:
        - manifests
      description: Holds data for an appType=Container. This definition allows an application to be specfiied that can run in multiple containers.
      properties:
        url:
          type: string
          description: >
            The initial URL of the application. This is optional and may need to be repeated in
            the container specific manifest.

            We would recommend that Manifests can reference this URL via macros
        signature:
          type: string
          description: >-
            The domain or public key that the application lives under. For
            example, the manifest_url would not be able to live under
            cdn.openfin2.co. Public Key would be a 1:1 ratio to an application
            but you can have many applications under a domain. Only required if
            app type is container.
        manifests:
          type: array
          description: >
            List of Container specific manifests for the application.

            Maybe allow a shortcut to just have a single manifest for sites with
            only a single container.

            The discriminated list is of more use for companies offering an
            application supported in multiple containers.
          items:
            $ref: '#/components/schemas/ContainerManifest'
    AppCustom:
      description: >-
        Holds data for any other app type, it is assumed that the launcher and
        app directory will have agreed values to store here, outside the scope
        of FDC3
      properties:
        config:
          type: array
          description: >-
            The set of custom data, I prefer to give this as a list of
            name/value pairs with the value typically being a JSon object rather
            than a single value.
          items:
            $ref: '#/components/schemas/NameValuePair'
    ContainerManifest:
      required:
        - containerType
        - manifest
      properties:
        containerType:
          type: string
          description: >
            name of the Container, agreed between container vendor and launcher.

            Should we allow companies to register standard container names like
            OpenFin, Autobahn or Glue42?
        manifest:
          type: string
          description: >
            The application manifest for the chosen container type.

    ApplicationSearchResponse:
      properties:
        applications:
          type: array
          description: |
            List of applications
          items:
            $ref: '#/components/schemas/Application'
        message:
          type: string
          description: |
            Response message providing status of query
    NameValuePair:
      description: Simple name value pair
      properties:
        name:
          type: string
          description: name
        value:
          type: string
          description: value
    Icon:
      description: Icon holder
      properties:
        icon:
          type: string
          description: Icon URL
    AppImage:
      description: App Image holder
      properties:
        url:
          type: string
          description: App Image URL
    Intent:
      description: >-
        An intent definition as defined by spec
        https://github.com/FDC3/Intents/blob/master/src/Intent.yaml
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the intent to 'launch'. In this case the name of an Intent supported by an Application.
        displayName:
          type: string
          description: An optional display name for the intent that may be used in UI instead of the name.
        contexts:
          type: array
          items:
            type: string
          description: >-
            A comma sepaarted list of the types of contexts the intent offered by the application can process. 
            where the first part of the context type is the namespace e.g."fdc3.contact, org.symphony.contact"
        customConfig:
          type: object
          description: >-
            Custom configuration for the intent that may be required for a
            particular desktop agent.
